{
  "version": 3,
  "sources": ["../../../src/authorization/index.js"],
  "sourcesContent": ["import { createHmac } from 'crypto';\r\nimport { CognitoIdentityProviderClient, InitiateAuthCommand } from \"@aws-sdk/client-cognito-identity-provider\";\r\nconst client = new CognitoIdentityProviderClient({ region: \"us-east-1\" });\r\n\r\nexport const authorizationHandler = async (event) => {\r\n    const credentials = JSON.parse(event.body);\r\n    console.log(\"CREDENTIALS:\", JSON.stringify(credentials, null, 2));\r\n    const params = {\r\n      AuthFlow: 'USER_PASSWORD_AUTH',\r\n      ClientId: process.env.COGNITO_ID,\r\n      AuthParameters: {\r\n        USERNAME: credentials.username,\r\n        PASSWORD: credentials.password ,\r\n        SECRET_HASH: generateCognitoSecretHash(\r\n          process.env.COGNITO_ID,\r\n          process.env.COGNITO_SECRET,\r\n          credentials.username,\r\n        ),\r\n      },\r\n    };\r\n    console.log(\"params para secret  hash: client_ID: \" + process.env.COGNITO_ID + \" secretId: \" + process.env.COGNITO_SECRET + \" username: \" + credentials.username);\r\n    console.log(\"params:\", JSON.stringify(params, null, 2));\r\n\r\n    try {\r\n        const command = new InitiateAuthCommand(params);\r\n        const response = await client.send(command);\r\n    \r\n        return { \r\n            statusCode: 200, \r\n            body: JSON.stringify(response)\r\n        };\r\n    } catch(error) {\r\n        return {\r\n          statusCode: 500,\r\n          body: JSON.stringify({ message: error.message }),\r\n        };\r\n    }\r\n}\r\n\r\nfunction generateCognitoSecretHash(\r\n    clientId,\r\n    clientSecret,\r\n    username,\r\n  ) {\r\n    const message = username + clientId;\r\n    return createHmac('sha256', clientSecret).update(message).digest('base64');\r\n  }"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,0BAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA2B,kBAC3BC,EAAmE,qDAC7DC,EAAS,IAAI,gCAA8B,CAAE,OAAQ,WAAY,CAAC,EAE3DJ,EAAuB,MAAOK,GAAU,CACjD,IAAMC,EAAc,KAAK,MAAMD,EAAM,IAAI,EACzC,QAAQ,IAAI,eAAgB,KAAK,UAAUC,EAAa,KAAM,CAAC,CAAC,EAChE,IAAMC,EAAS,CACb,SAAU,qBACV,SAAU,QAAQ,IAAI,WACtB,eAAgB,CACd,SAAUD,EAAY,SACtB,SAAUA,EAAY,SACtB,YAAaE,EACX,QAAQ,IAAI,WACZ,QAAQ,IAAI,eACZF,EAAY,QACd,CACF,CACF,EACA,QAAQ,IAAI,wCAA0C,QAAQ,IAAI,WAAa,cAAgB,QAAQ,IAAI,eAAiB,cAAgBA,EAAY,QAAQ,EAChK,QAAQ,IAAI,UAAW,KAAK,UAAUC,EAAQ,KAAM,CAAC,CAAC,EAEtD,GAAI,CACA,IAAME,EAAU,IAAI,sBAAoBF,CAAM,EACxCG,EAAW,MAAMN,EAAO,KAAKK,CAAO,EAE1C,MAAO,CACH,WAAY,IACZ,KAAM,KAAK,UAAUC,CAAQ,CACjC,CACJ,OAAQC,EAAO,CACX,MAAO,CACL,WAAY,IACZ,KAAM,KAAK,UAAU,CAAE,QAASA,EAAM,OAAQ,CAAC,CACjD,CACJ,CACJ,EAEA,SAASH,EACLI,EACAC,EACAC,EACA,CACA,IAAMC,EAAUD,EAAWF,EAC3B,SAAO,cAAW,SAAUC,CAAY,EAAE,OAAOE,CAAO,EAAE,OAAO,QAAQ,CAC3E",
  "names": ["authorization_exports", "__export", "authorizationHandler", "__toCommonJS", "import_crypto", "import_client_cognito_identity_provider", "client", "event", "credentials", "params", "generateCognitoSecretHash", "command", "response", "error", "clientId", "clientSecret", "username", "message"]
}
