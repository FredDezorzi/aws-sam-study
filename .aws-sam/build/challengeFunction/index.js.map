{
  "version": 3,
  "sources": ["../../../src/challenge/index.js"],
  "sourcesContent": ["import { createHmac } from 'crypto';\r\nimport { CognitoIdentityProviderClient, RespondToAuthChallengeCommand } from \"@aws-sdk/client-cognito-identity-provider\";\r\nconst client = new CognitoIdentityProviderClient({ region: \"us-east-1\" });\r\n\r\nexport const challengeHandler = async (event) => {\r\n    const credentials = JSON.parse(event.body);\r\n    console.log(\"CREDENTIALS:\", JSON.stringify(credentials, null, 2));\r\n    const params = {\r\n      ChallengeName: \"NEW_PASSWORD_REQUIRED\",\r\n      ClientId: process.env.COGNITO_ID,\r\n      ChallengeResponses: {\r\n        USERNAME: credentials.USER_ID_FOR_SRP,\r\n        NEW_PASSWORD: credentials.newPassword,\r\n        SECRET_HASH: generateCognitoSecretHash(\r\n          process.env.COGNITO_ID ,\r\n          process.env.COGNITO_SECRET,\r\n          credentials.USER_ID_FOR_SRP,\r\n        ),\r\n      },\r\n      Session: credentials.Session,\r\n    }\r\n      console.log(\"params:\", JSON.stringify(params, null, 2));\r\n\r\n      try {\r\n        const command = new RespondToAuthChallengeCommand(params);\r\n        const response = await client.send(command);\r\n        console.log(\"Autenticado com sucesso:\", response);\r\n        return { \r\n            statusCode: 200, \r\n            body: JSON.stringify(response)\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Erro ao responder ao desafio:\", error);\r\n        return {\r\n            statusCode: 500,\r\n            body: JSON.stringify({ message: error.message }),\r\n          };\r\n      }\r\n}\r\n\r\nfunction generateCognitoSecretHash(clientId, clientSecret, username,) {\r\n    const message = username + clientId;\r\n    return createHmac('sha256', clientSecret).update(message).digest('base64');\r\n  }"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,sBAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA2B,kBAC3BC,EAA6E,qDACvEC,EAAS,IAAI,gCAA8B,CAAE,OAAQ,WAAY,CAAC,EAE3DJ,EAAmB,MAAOK,GAAU,CAC7C,IAAMC,EAAc,KAAK,MAAMD,EAAM,IAAI,EACzC,QAAQ,IAAI,eAAgB,KAAK,UAAUC,EAAa,KAAM,CAAC,CAAC,EAChE,IAAMC,EAAS,CACb,cAAe,wBACf,SAAU,QAAQ,IAAI,WACtB,mBAAoB,CAClB,SAAUD,EAAY,gBACtB,aAAcA,EAAY,YAC1B,YAAaE,EACX,QAAQ,IAAI,WACZ,QAAQ,IAAI,eACZF,EAAY,eACd,CACF,EACA,QAASA,EAAY,OACvB,EACE,QAAQ,IAAI,UAAW,KAAK,UAAUC,EAAQ,KAAM,CAAC,CAAC,EAEtD,GAAI,CACF,IAAME,EAAU,IAAI,gCAA8BF,CAAM,EAClDG,EAAW,MAAMN,EAAO,KAAKK,CAAO,EAC1C,eAAQ,IAAI,2BAA4BC,CAAQ,EACzC,CACH,WAAY,IACZ,KAAM,KAAK,UAAUA,CAAQ,CACjC,CACF,OAASC,EAAO,CACd,eAAQ,MAAM,gCAAiCA,CAAK,EAC7C,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,CAAE,QAASA,EAAM,OAAQ,CAAC,CACjD,CACJ,CACN,EAEA,SAASH,EAA0BI,EAAUC,EAAcC,EAAW,CAClE,IAAMC,EAAUD,EAAWF,EAC3B,SAAO,cAAW,SAAUC,CAAY,EAAE,OAAOE,CAAO,EAAE,OAAO,QAAQ,CAC3E",
  "names": ["challenge_exports", "__export", "challengeHandler", "__toCommonJS", "import_crypto", "import_client_cognito_identity_provider", "client", "event", "credentials", "params", "generateCognitoSecretHash", "command", "response", "error", "clientId", "clientSecret", "username", "message"]
}
