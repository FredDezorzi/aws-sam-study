AWSTemplateFormatVersion: '2010-09-09'
Description: Infraestrutura serverless para web app com buckets S3, CloudFront, DynamoDB,
  Lambda, SQS, SNS e API Gateway.
Transform:
- AWS::Serverless-2016-10-31
Resources:
  bucketS3WebSite:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: webapp-bucket-${AWS::Region}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  bucketS3RepositoryObjects:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: repository-bucket-${AWS::Region}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  bucketS3WebSitePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: bucketS3WebSite
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontWebApp
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource:
            Fn::Sub:
            - arn:aws:s3:::${Bucket}/*
            - Bucket:
                Ref: bucketS3WebSite
  bucketS3RepositoryObjectsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: bucketS3RepositoryObjects
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForRepositoryPublicAccess
        Statement:
        - Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub:
            - arn:aws:s3:::${Bucket}/*
            - Bucket:
                Ref: bucketS3RepositoryObjects
  cloudFrontWebAppOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name:
          Fn::Sub: webapp-control-origin-${AWS::Region}-${AWS::AccountId}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  cloudFrontWebAppDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName:
            Fn::GetAtt:
            - bucketS3WebSite
            - RegionalDomainName
          Id:
            Fn::Sub: webapp-origin-s3-${AWS::Region}-${AWS::AccountId}
          OriginAccessControlId:
            Fn::GetAtt:
            - cloudFrontWebAppOriginAccessControl
            - Id
          S3OriginConfig: {}
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId:
            Fn::Sub: webapp-origin-s3-${AWS::Region}-${AWS::AccountId}
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        CustomErrorResponses:
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - US
            - BR
  dynamoDBStoresTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: stores-table
      AttributeDefinitions:
      - AttributeName: storeId
        AttributeType: S
      KeySchema:
      - AttributeName: storeId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  dynamoDBProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: products-table
      AttributeDefinitions:
      - AttributeName: storeId
        AttributeType: S
      - AttributeName: productId
        AttributeType: S
      KeySchema:
      - AttributeName: storeId
        KeyType: HASH
      - AttributeName: productId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  SQSRequestStoreQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: request-store-queue-${AWS::Region}-${AWS::AccountId}
      VisibilityTimeout: 60
  SQSRequestProductQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: request-product-queue-${AWS::Region}-${AWS::AccountId}
      VisibilityTimeout: 60
  storeRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: storeRequestFunction
      Handler: index.storeRequestHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Store registration request
      Environment:
        Variables:
          STORES_TABLE:
            Ref: dynamoDBStoresTable
          SQS_QUEUE_URL:
            Ref: SQSRequestStoreQueue
          NODE_OPTIONS: ' --enable-source-maps'
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: dynamoDBStoresTable
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - SQSRequestStoreQueue
            - QueueName
      - Statement:
          Effect: Allow
          Action: lambda:InvokeFunction
          Resource: '*'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /store
            Method: POST
            RestApiId:
              Ref: apiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - storeRequest/index.js
        External:
        - aws-sdk
        Minify: true
        Sourcemap: true
        Target: es2020
      SamResourceId: storeRequestFunction
  productRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: productRequestFunction
      Handler: index.productRequestHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Product registration request
      Environment:
        Variables:
          PRODUCTS_TABLE:
            Ref: dynamoDBProductsTable
          STORES_TABLE:
            Ref: dynamoDBStoresTable
          SQS_QUEUE_URL:
            Ref: SQSRequestProductQueue
          NODE_OPTIONS: ' --enable-source-maps'
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: dynamoDBStoresTable
      - DynamoDBReadPolicy:
          TableName:
            Ref: dynamoDBProductsTable
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - SQSRequestProductQueue
            - QueueName
      - Statement:
          Effect: Allow
          Action: lambda:InvokeFunction
          Resource: '*'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /product
            Method: POST
            RestApiId:
              Ref: apiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - productRequest/index.js
        External:
        - aws-sdk
        Minify: true
        Sourcemap: true
        Target: es2020
      SamResourceId: productRequestFunction
  storeProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: storeProcessFunction
      Handler: index.storeProcessHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Processes store registration
      Environment:
        Variables:
          STORES_TABLE:
            Ref: dynamoDBStoresTable
          NODE_OPTIONS: ' --enable-source-maps'
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: dynamoDBStoresTable
      - DynamoDBReadPolicy:
          TableName:
            Ref: dynamoDBStoresTable
      - Statement:
          Effect: Allow
          Action:
          - sns:CreateTopic
          - sns:Subscribe
          Resource: '*'
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - SQSRequestStoreQueue
              - Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - storeProcess/index.js
        External:
        - aws-sdk
        Minify: true
        Sourcemap: true
        Target: es2020
      SamResourceId: storeProcessFunction
  productProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: productProcessFunction
      Handler: index.productProcessHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Processes product registration
      Environment:
        Variables:
          BUCKET_STORAGE:
            Ref: bucketS3RepositoryObjects
          PRODUCTS_TABLE:
            Ref: dynamoDBProductsTable
          NODE_OPTIONS: ' --enable-source-maps'
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: dynamoDBProductsTable
      - DynamoDBReadPolicy:
          TableName:
            Ref: dynamoDBProductsTable
      - S3WritePolicy:
          BucketName:
            Ref: bucketS3RepositoryObjects
      - Statement:
          Effect: Allow
          Action: sns:Publish
          Resource: '*'
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - SQSRequestProductQueue
              - Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - productProcess/index.js
        External:
        - aws-sdk
        Minify: true
        Sourcemap: true
        Target: es2020
      SamResourceId: productProcessFunction
  emailApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: emailApprovalFunction
      Handler: index.emailApprovalHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      Timeout: 10
      MemorySize: 128
      Description: "Verifica a aprova\xE7\xE3o de email de varios topicos SNS"
      Environment:
        Variables:
          STORES_TABLE:
            Ref: dynamoDBStoresTable
          NODE_OPTIONS: ' --enable-source-maps'
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: dynamoDBStoresTable
      - DynamoDBReadPolicy:
          TableName:
            Ref: dynamoDBStoresTable
      - Statement:
          Effect: Allow
          Action:
          - sns:Publish
          - sns:GetSubscriptionAttributes
          - sns:ListSubscriptionsByTopic
          Resource: '*'
      Events:
        CheckSubscriptionsSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - emailApproval/index.js
        External:
        - aws-sdk
        Minify: true
        Sourcemap: true
        Target: es2020
      SamResourceId: emailApprovalFunction
  authorizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorizationFunction
      Handler: index.authorizationHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Cria token de acesso para o usuario
      Environment:
        Variables:
          COGNITO_ID:
            Ref: cognitoUserClient
          COGNITO_SECRET:
            Fn::GetAtt:
            - cognitoUserClient
            - ClientSecret
          NODE_OPTIONS: ' --enable-source-maps'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth
            Method: POST
            RestApiId:
              Ref: apiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - authorization/index.js
        External:
        - aws-sdk
        - '@aws-sdk/client-cognito-identity-provider'
        Minify: true
        Sourcemap: true
        Target: es2020
      SamResourceId: authorizationFunction
  challengeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: challengeFunction
      Handler: index.challengeHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Muda a senha do userpool
      Environment:
        Variables:
          COGNITO_ID:
            Ref: cognitoUserClient
          COGNITO_SECRET:
            Fn::GetAtt:
            - cognitoUserClient
            - ClientSecret
          NODE_OPTIONS: ' --enable-source-maps'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /challenge
            Method: POST
            RestApiId:
              Ref: apiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - challenge/index.js
        External:
        - aws-sdk
        - '@aws-sdk/client-cognito-identity-provider'
        Minify: true
        Sourcemap: true
        Target: es2020
      SamResourceId: challengeFunction
  apiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      DefinitionBody:
        swagger: '2.0'
        info:
          title: Web App API
          version: '1.0'
        paths:
          /challenge:
            post:
              summary: challenge new password request
              operationId: challengeRequest
              consumes:
              - application/json
              produces:
              - application/json
              parameters:
              - name: body
                in: body
                required: true
                schema:
                  type: object
                  properties:
                    newPassword:
                      type: string
                    USER_ID_FOR_SRP:
                      type: string
                    Session:
                      type: string
              responses:
                '200':
                  description: Successful response
                '400':
                  description: Invalid input
              security: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${challengeFunction.Arn}/invocations
                responses: {}
          /auth:
            post:
              summary: Authentication request
              operationId: authorizationRequest
              consumes:
              - application/json
              produces:
              - application/json
              parameters:
              - name: body
                in: body
                required: true
                schema:
                  type: object
                  properties:
                    username:
                      type: string
                    password:
                      type: string
              responses:
                '200':
                  description: Successful response
                '400':
                  description: Invalid input
              security: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${authorizationFunction.Arn}/invocations
                responses: {}
          /store:
            post:
              summary: Store registration request
              operationId: storeRequest
              consumes:
              - application/json
              produces:
              - application/json
              parameters:
              - name: body
                in: body
                required: true
                schema:
                  type: object
                  properties:
                    storeName:
                      type: string
                    email:
                      type: string
              responses:
                '200':
                  description: Successful response
                '400':
                  description: Invalid input
              security:
              - cognitoAuth: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${storeRequestFunction.Arn}/invocations
                responses: {}
          /product:
            post:
              summary: Product registration request
              operationId: productRequest
              consumes:
              - application/json
              produces:
              - application/json
              parameters:
              - name: body
                in: body
                required: true
                schema:
                  type: object
                  properties:
                    storeId:
                      type: string
                    productName:
                      type: string
                    price:
                      type: number
              responses:
                '200':
                  description: Successful response
                '400':
                  description: Invalid input
              security:
              - cognitoAuth: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${productRequestFunction.Arn}/invocations
                responses: {}
      Auth:
        Authorizers:
          cognitoAuth:
            UserPoolArn:
              Fn::GetAtt:
              - cognitoUserPool
              - Arn
            AuthType: COGNITO_USER_POOLS
            Identity:
              Headers:
              - Authorization
  cognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cognito-studyapp-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          TemporaryPasswordValidityDays: 7
      Schema:
      - AttributeDataType: String
        Name: email
        Mutable: true
        Required: true
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      UsernameConfiguration:
        CaseSensitive: false
  cognitoUserClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cognito-studyapp-user-client
      GenerateSecret: true
      UserPoolId:
        Ref: cognitoUserPool
      AccessTokenValidity: 5
      ExplicitAuthFlows:
      - ADMIN_NO_SRP_AUTH
      - USER_PASSWORD_AUTH
      AllowedOAuthFlows:
      - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
      - email
      - openid
      - profile
      SupportedIdentityProviders:
      - COGNITO
      CallbackURLs:
      - http://localhost:8080
  cognitoResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: cognito-studyapp-resource-Server
      Name: cognitoResourceServer
      Scopes:
      - ScopeDescription: "Permissao de acesso \xE0 autentifica\xE7\xE3o"
        ScopeName: user_acess
      UserPoolId:
        Ref: cognitoUserPool
Outputs:
  WebAppDomain:
    Value:
      Fn::GetAtt:
      - cloudFrontWebAppDistribution
      - DomainName
  ApiRestURL:
    Value:
      Fn::Sub: https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/v1/
