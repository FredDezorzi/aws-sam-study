AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Serverless infrastructure for a web app with S3 buckets, Cognito, EventBridge, DynamoDB, Lambda, SQS, SNS, and API Gateway.

Transform: 
  - AWS::Serverless-2016-10-31

Resources:
  #########################################################
  ##                  BUCKETS S3
  #########################################################

  bucketS3RepositoryObjects:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "repository-bucket-${AWS::Region}-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  
  bucketS3RepositoryObjectsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref bucketS3RepositoryObjects
      PolicyDocument:
        Version: "2012-10-17"
        Id: PolicyForRepositoryPublicAccess
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub
              - "arn:aws:s3:::${Bucket}/*"
              - Bucket: !Ref bucketS3RepositoryObjects

  #########################################################
  ##                  DYNAMODB TABLES
  #########################################################

  dynamoDBStoresTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: stores-table
      AttributeDefinitions:
        - AttributeName: storeId
          AttributeType: S
      KeySchema:
        - AttributeName: storeId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  dynamoDBProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: products-table
      AttributeDefinitions:
        - AttributeName: storeId
          AttributeType: S
        - AttributeName: productId
          AttributeType: S
      KeySchema:
        - AttributeName: storeId
          KeyType: HASH
        - AttributeName: productId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  #########################################################
  ##                  SQS QUEUE
  #########################################################

  SQSRequestStoreQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "request-store-queue-${AWS::Region}-${AWS::AccountId}"
      VisibilityTimeout: 60

  SQSRequestProductQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "request-product-queue-${AWS::Region}-${AWS::AccountId}"
      VisibilityTimeout: 60

  #########################################################
  ##                  LAMBDA FUNCTIONS
  #########################################################

  storeRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: storeRequest/index.storeRequestHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 10 
      MemorySize: 128
      Description: Store registration request.
      Environment:
        Variables:
          STORES_TABLE: !Ref dynamoDBStoresTable
          SQS_QUEUE_URL: !Ref SQSRequestStoreQueue
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref dynamoDBStoresTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SQSRequestStoreQueue.QueueName
        - Statement:
            Effect: Allow
            Action: lambda:InvokeFunction
            Resource: "*"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /store
            Method: POST
            RestApiId: !Ref apiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        External:
        - aws-sdk
        EntryPoints:
          - storeRequest/index.js

  productRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: productRequest/index.productRequestHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Product registration request.
      Environment:
        Variables:
          PRODUCTS_TABLE: !Ref dynamoDBProductsTable
          STORES_TABLE: !Ref dynamoDBStoresTable
          SQS_QUEUE_URL: !Ref SQSRequestProductQueue
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref dynamoDBStoresTable
        - DynamoDBReadPolicy:
            TableName: !Ref dynamoDBProductsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SQSRequestProductQueue.QueueName
        - Statement:
            Effect: Allow
            Action: lambda:InvokeFunction
            Resource: "*"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /product
            Method: POST
            RestApiId: !Ref apiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        External:
        - aws-sdk
        EntryPoints:
          - productRequest/index.js

  storeProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: storeProcess/index.storeProcessHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Processes store registration.
      Environment:
        Variables:
          STORES_TABLE: !Ref dynamoDBStoresTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref dynamoDBStoresTable
        - DynamoDBReadPolicy:
            TableName: !Ref dynamoDBStoresTable
        - Statement:
            Effect: Allow
            Action:
              - sns:CreateTopic
              - sns:Subscribe
            Resource: "*"
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSRequestStoreQueue.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        External:
        - aws-sdk
        EntryPoints:
          - storeProcess/index.js

  productProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: productProcess/index.productProcessHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Processes product registration.
      Environment:
        Variables:
          BUCKET_STORAGE: !Ref bucketS3RepositoryObjects
          PRODUCTS_TABLE: !Ref dynamoDBProductsTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref dynamoDBProductsTable
        - DynamoDBReadPolicy:
            TableName: !Ref dynamoDBProductsTable
        - S3WritePolicy:
            BucketName: !Ref bucketS3RepositoryObjects
        - Statement:
            Effect: Allow
            Action: sns:Publish
            Resource: "*"
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSRequestProductQueue.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        External:
        - aws-sdk
        EntryPoints:
          - productProcess/index.js
          
  emailApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: emailApproval/index.emailApprovalHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Check the email approval for multiple SNS topics.
      Environment:
        Variables:
          STORES_TABLE: !Ref dynamoDBStoresTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref dynamoDBStoresTable
        - DynamoDBReadPolicy:
            TableName: !Ref dynamoDBStoresTable
        - Statement:
            Effect: Allow
            Action: 
              - sns:Publish
              - sns:GetSubscriptionAttributes
              - sns:ListSubscriptionsByTopic
            Resource: "*"
      Events:
        CheckSubscriptionsSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        External:
        - aws-sdk
        EntryPoints:
          - emailApproval/index.js
    
  authorizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: authorization/index.authorizationHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Generate access token for the user.
      Environment:
        Variables:
          COGNITO_ID: !Ref cognitoUserClient
          COGNITO_SECRET: !GetAtt cognitoUserClient.ClientSecret
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth
            Method: POST
            RestApiId: !Ref apiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        External:
        - aws-sdk
        - "@aws-sdk/client-cognito-identity-provider"
        EntryPoints:
          - authorization/index.js

  permanentPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: challenge/index.challengeHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Timeout: 10
      MemorySize: 128
      Description: Generate a permanent password for the user.
      Environment:
        Variables:
          COGNITO_ID: !Ref cognitoUserClient
          COGNITO_SECRET: !GetAtt cognitoUserClient.ClientSecret
      Events:
        Api:
          Type: Api
          Properties:
            Path: /challenge
            Method: POST
            RestApiId: !Ref apiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        External:
        - aws-sdk
        - "@aws-sdk/client-cognito-identity-provider"
        EntryPoints:
          - challenge/index.js

  #########################################################
  ##                  API GATEWAY
  #########################################################

  apiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      DefinitionBody:
        swagger: '2.0'
        info:
          title: 'Web App API'
          version: '1.0'
        paths:
          /changePassword:
            post:
              summary: 'Generate a permanent password for the user.'
              operationId: 'changePassword'
              consumes:
                - 'application/json'
              produces:
                - 'application/json'
              parameters:
                - name: 'body'
                  in: 'body'
                  required: true
                  schema:
                    type: 'object'
                    properties:
                      newPassword:
                        type: 'string'
                      userIdForSrp:
                        type: 'string'
                      session:
                        type: 'string'
              responses:
                '200':
                  description: 'Successful response'
                '400':
                  description: 'Invalid input'
              security: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${challengeFunction.Arn}/invocations
                responses: {}
          /auth:
            post:
              summary: 'Authentication request'
              operationId: 'authorizationRequest'
              consumes:
                - 'application/json'
              produces:
                - 'application/json'
              parameters:
                - name: 'body'
                  in: 'body'
                  required: true
                  schema:
                    type: 'object'
                    properties:
                      username:
                        type: 'string'
                      password:
                        type: 'string'
              responses:
                '200':
                  description: 'Successful response'
                '400':
                  description: 'Invalid input'
              security: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${authorizationFunction.Arn}/invocations
                responses: {}
          /store:
            post:
              summary: 'Store registration request'
              operationId: 'storeRequest'
              consumes:
                - 'application/json'
              produces:
                - 'application/json'
              parameters:
                - name: 'body'
                  in: 'body'
                  required: true
                  schema:
                    type: 'object'
                    properties:
                      storeName:
                        type: 'string'
                      email:
                        type: 'string'
              responses:
                '200':
                  description: 'Successful response'
                '400':
                  description: 'Invalid input'
              security:
                - cognitoAuth: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${storeRequestFunction.Arn}/invocations
                responses: {}
          /product:
            post:
              summary: 'Product registration request'
              operationId: 'productRequest'
              consumes:
                - 'application/json'
              produces:
                - 'application/json'
              parameters:
                - name: 'body'
                  in: 'body'
                  required: true
                  schema:
                    type: 'object'
                    properties:
                      storeId:
                        type: 'string'
                      productName:
                        type: 'string'
                      price:
                        type: 'number'
              responses:
                '200':
                  description: 'Successful response'
                '400':
                  description: 'Invalid input'
              security:
                - cognitoAuth: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${productRequestFunction.Arn}/invocations
                responses: {}
      Auth:
        Authorizers:
          cognitoAuth:
            UserPoolArn: !GetAtt cognitoUserPool.Arn
            AuthType: COGNITO_USER_POOLS
            Identity: 
              Headers: 
                - Authorization

  #########################################################
  ##                  COGNITO USER POOL
  #########################################################

  cognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cognito-studyapp-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          Name: email
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false

  cognitoUserClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cognito-studyapp-user-client
      GenerateSecret: true
      UserPoolId: 
        Ref: cognitoUserPool
      AccessTokenValidity: 5
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      AllowedOAuthFlows: 
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: 
        - "http://localhost:8080"

  cognitoResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: cognito-studyapp-resource-Server
      Name: cognitoResourceServer
      Scopes: 
        - ScopeDescription: "Access permission to authentication."
          ScopeName: user_acess
      UserPoolId: !Ref cognitoUserPool

Outputs:
  ApiRestURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/v1/"